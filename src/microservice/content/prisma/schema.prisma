// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../../../../node_modules/.prisma/content"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_CONTENT_URL")
}

enum AvailableStatus {
    Active
    Drafted
    Trashed
}

enum CommentStatus {
    Active
    Pending
    Trashed
}

type UserLite {
    id        String  @db.ObjectId
    name      String?
    username  String?
    email     String?
    avatarUrl String?
}

type Metadata {
    title       String?
    description String?
    image       String?
    author      String?
    robot       String?
    index       String?
}

type PostLite {
    id       String    @db.ObjectId
    name     String
    path     String
    imageUrl String?
    author   UserLite?
}

type CommentLite {
    id   String @db.ObjectId
    name String
}

model Category {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    parentId    String?         @db.ObjectId
    status      AvailableStatus @default(Drafted)
    name        String
    slug        String
    path        String
    description String?
    createdAt   DateTime        @default(now())
    updatedAt   DateTime?       @updatedAt
    metadata    Metadata?
    author      UserLite?
    editor      UserLite?
    posts       Post[]
    parent      Category?       @relation("NestedCategory", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    children    Category[]      @relation("NestedCategory")

    @@unique([slug])
    @@unique([path])
}

model Post {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    categoryId  String?         @db.ObjectId
    category    Category?       @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    status      AvailableStatus @default(Drafted)
    name        String
    slug        String
    path        String
    imageUrl    String?
    description String?
    metadata    Metadata?
    createdAt   DateTime        @default(now())
    updatedAt   DateTime?       @updatedAt
    author      UserLite?
    editor      UserLite?

    @@unique([slug])
    @@unique([path])
}

model Tag {
    id        String          @id @default(auto()) @map("_id") @db.ObjectId
    status    AvailableStatus @default(Drafted)
    name      String          @unique
    createdAt DateTime        @default(now())
    updatedAt DateTime?       @updatedAt
    author    UserLite?
    editor    UserLite?
}

model Comment {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    status    CommentStatus @default(Pending)
    post      PostLite
    message   String
    createdAt DateTime      @default(now())
    updatedAt DateTime?     @updatedAt
    author    UserLite?
    editor    UserLite?
}

model Reply {
    id        String        @id @default(auto()) @map("_id") @db.ObjectId
    status    CommentStatus @default(Pending)
    post      PostLite
    comment   CommentLite
    message   String
    createdAt DateTime      @default(now())
    updatedAt DateTime?     @updatedAt
    author    UserLite?
    editor    UserLite?
}
