// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../../../../../node_modules/.prisma/order"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_CONTENT_URL")
}

enum AvailableStatus {
    Active
    Drafted
    Trashed
}

enum OrderStatus {
    Created
    Paid
    Closed
    Cancelled
}

type User {
    id        String  @db.ObjectId
    name      String?
    username  String?
    email     String?
    avatarUrl String?
}

type Topping {
    name     String
    price    Float
    quantity Int?
}

type OrderActivity {
    createdAt DateTime   @default(now())
    action    String
    staff     StaffLike?
}

enum TableStatus {
    Free
    Ordered
    Pending
}

type StaffLike {
    id        String  @db.ObjectId
    name      String
    avatarUrl String?
}

enum StaffStatus {
    Working
    Retired
}

type OrderItem {
    id        String     @db.ObjectId
    name      String
    basePrice Int        @db.Long
    topping   Topping?
    quantity  Int
    staff     StaffLike?
}

model Category {
    id        String          @id @default(auto()) @map("_id") @db.ObjectId
    status    AvailableStatus @default(Drafted)
    name      String          @unique
    createdAt DateTime        @default(now())
    updatedAt DateTime?       @updatedAt
    author    User?
    editor    User?
    items     Item[]
}

model Restaurant {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    status      AvailableStatus @default(Drafted)
    owner       User
    name        String
    description String?
    imageUrl    String?
    address     String?
    phoneNumber String?
    email       String?
    createdAt   DateTime        @default(now())
    updatedAt   DateTime?       @updatedAt
    author      User?
    editor      User?
    items       Item[]
    tables      Table[]
    orders      Order[]
    staffs      Staff[]
}

model Staff {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    status       StaffStatus @default(Working)
    restaurantId String      @db.ObjectId
    restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    name         String
    phoneNumber  String?
    email        String?
    avatarUrl    String?
    createdAt    DateTime    @default(now())
    updatedAt    DateTime?   @updatedAt
    author       User?
    editor       User?
}

model Item {
    id           String          @id @default(auto()) @map("_id") @db.ObjectId
    categoryId   String?         @db.ObjectId
    category     Category?       @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    restaurantId String          @db.ObjectId
    restaurant   Restaurant      @relation(fields: [restaurantId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    status       AvailableStatus @default(Drafted)
    name         String
    imageUrl     String?
    basePrice    Int             @default(0) @db.Long
    topping      Topping?
    createdAt    DateTime        @default(now())
    updatedAt    DateTime?       @updatedAt
    author       User?
    editor       User?
}

model Table {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    status         AvailableStatus @default(Drafted)
    activityStatus TableStatus     @default(Free)
    activityAt     DateTime?
    restaurantId   String          @db.ObjectId
    restaurant     Restaurant      @relation(fields: [restaurantId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    number         Int
    area           String?
    createdAt      DateTime        @default(now())
    updatedAt      DateTime?       @updatedAt
    author         User?
    editor         User?
}

model Order {
    id           String          @id @default(auto()) @map("_id") @db.ObjectId
    status       OrderStatus     @default(Created)
    restaurantId String          @db.ObjectId
    restaurant   Restaurant      @relation(fields: [restaurantId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    number       Int
    tableIds     String[]        @db.ObjectId
    items        OrderItem[]
    activities   OrderActivity[]
    totalPrice   Int             @db.Long
    createdAt    DateTime        @default(now())
    updatedAt    DateTime?       @updatedAt
}
