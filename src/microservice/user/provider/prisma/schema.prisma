// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../../../../../node_modules/.prisma/user"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_USER_URL")
}

enum UserStatus {
    Active
    Pending
    Blocked
    Trashed
}

enum RoleStatus {
    Drafted
    Active
    Trashed
}

model User {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    username     String?    @unique
    email        String     @unique
    name         String?
    password     String?
    status       UserStatus @default(Pending)
    createdAt    DateTime   @default(now())
    createdBy    String?    @db.ObjectId
    updatedAt    DateTime?  @updatedAt
    updatedBy    String?    @db.ObjectId
    author       User?      @relation("author", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
    createdUsers User[]     @relation("author")
    editor       User?      @relation("editor", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
    updatedUsers User[]     @relation("editor")
    createdRoles Role[]     @relation("roleAuthor")
    updatedRoles Role[]     @relation("roleEditor")
    userRoles    UserRole[]
}

model Role {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    name        String     @unique
    description String?
    status      RoleStatus @default(Drafted)
    root        Boolean    @default(false)
    createdAt   DateTime   @default(now())
    createdBy   String?    @db.ObjectId
    updatedAt   DateTime?  @updatedAt
    updatedBy   String?    @db.ObjectId
    author      User?      @relation("roleAuthor", fields: [createdBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
    editor      User?      @relation("roleEditor", fields: [updatedBy], references: [id], onDelete: SetNull, onUpdate: SetNull)
    userRoles   UserRole[]
    permissions String[]
}

model UserRole {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    roleId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
